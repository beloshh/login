{"version":3,"sources":["components/Just.jsx","reportWebVitals.js","index.js"],"names":["Just","useForm","mode","register","handleSubmit","errors","formState","className","id","onSubmit","alert","ref","required","minLength","maxLength","name","type","placeholder","style","borderColor","First","Last","pattern","email","password","disabled","isSubmitting","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLA8JeA,MAzJf,WAAiB,IAAD,EACwCC,YAAQ,CAC5DC,KAAM,aADAC,EADM,EACNA,SAAUC,EADJ,EACIA,aAAcC,EADlB,EACkBA,OAAQC,EAD1B,EAC0BA,UAOxC,OACE,gCACE,sBAAKC,UAAU,UAAf,UACE,sBAAKC,GAAG,MAAMD,UAAU,iBAAxB,UACE,mBAAGC,GAAG,OAAOD,UAAU,iCAAvB,8CAGA,oBAAGC,GAAG,MAAMD,UAAU,YAAtB,0DAEE,uBAFF,0EAIa,uBAJb,6BAQF,sBAAKC,GAAG,MAAMD,UAAU,iBAAxB,UACE,qBAAKC,GAAG,QAAR,yDACA,sBAAKA,GAAG,OAAR,UACE,uBAAMC,SAAUL,GAtB1B,WACEM,MAAM,iCAqBE,UACE,qBAAKH,UAAU,QAAf,SACE,sBAAKA,UAAU,UAAf,UACE,uBACEI,IAAKR,EAAS,CACZS,UAAU,EACVC,UAAW,EACXC,UAAW,KAEbC,KAAK,QACLR,UAAU,QACVS,KAAK,OACLC,YAAY,aACZC,MAAO,CAAEC,YAAad,EAAOe,OAAS,SAEvCf,EAAOe,OAA+B,aAAtBf,EAAOe,MAAMJ,MAC5B,4DAEDX,EAAOe,OAA+B,cAAtBf,EAAOe,MAAMJ,MAC5B,6DAEDX,EAAOe,OAA+B,cAAtBf,EAAOe,MAAMJ,MAC5B,iEAIN,qBAAKT,UAAU,QAAf,SACE,sBAAKA,UAAU,UAAf,UACE,uBACEI,IAAKR,EAAS,CACZS,UAAU,EACVC,UAAW,EACXC,UAAW,KAEbC,KAAK,OACLR,UAAU,QACVS,KAAK,OACLC,YAAY,aACZC,MAAO,CAAEC,YAAad,EAAOgB,MAAQ,SAEtChB,EAAOgB,MAA6B,aAArBhB,EAAOgB,KAAKL,MAC1B,2DAEDX,EAAOgB,MAA6B,cAArBhB,EAAOgB,KAAKL,MAC1B,4DAEDX,EAAOgB,MAA6B,cAArBhB,EAAOgB,KAAKL,MAC1B,gEAKN,qBAAKT,UAAU,QAAf,SACE,sBAAKA,UAAU,UAAf,UACE,uBACEI,IAAKR,EAAS,CACZS,UAAU,EACVC,UAAW,EACXS,QAAS,qCAEXP,KAAK,QACLR,UAAU,QACVS,KAAK,QACLC,YAAY,gBACZC,MAAO,CAAEC,YAAad,EAAOkB,OAAS,SAEvClB,EAAOkB,OAA+B,aAAtBlB,EAAOkB,MAAMP,MAC5B,uDAEDX,EAAOkB,OAA+B,cAAtBlB,EAAOkB,MAAMP,MAC5B,8DAIN,qBAAKT,UAAU,QAAf,SACE,sBAAKA,UAAU,UAAf,UACE,uBACEI,IAAKR,EAAS,CACZS,UAAU,EACVC,UAAW,IAEbE,KAAK,WACLR,UAAU,QACVS,KAAK,WACLC,YAAY,WACZC,MAAO,CAAEC,YAAad,EAAOmB,UAAY,SAE1CnB,EAAOmB,UAAqC,aAAzBnB,EAAOmB,SAASR,MAClC,0DAEDX,EAAOmB,UAAqC,cAAzBnB,EAAOmB,SAASR,MAClC,+DAKN,wBACEA,KAAK,SACLT,UAAU,QACVkB,SAAUnB,EAAUoB,aAHtB,sCASF,oBAAGnB,UAAU,MAAb,4DACkD,IAChD,mBAAGoB,KAAK,MAAR,SACE,sEAMV,iCACE,oBAAGpB,UAAU,cAAb,yBACe,IACb,mBAAGoB,KAAK,8CAAR,6BAFF,cAKa,mBAAGA,KAAK,6BAAR,2BALb,aCtIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8d8e426.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport \"react-bulma-components/dist/react-bulma-components.min.css\";\r\nimport \"../style/style.css\";\r\n\r\nfunction Just() {\r\n  const { register, handleSubmit, errors, formState } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  function onSubmit() {\r\n    alert(\"form validation successful\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"columns\">\r\n        <div id=\"one\" className=\"column is-half\">\r\n          <p id=\"pole\" className=\"is-size-1 has-text-weight-bold\">\r\n            Learn to code by watching others\r\n          </p>\r\n          <p id=\"you\" className=\"is-size-6\">\r\n            See how experienced developers solve problems\r\n            <br />\r\n            Watching scripted tutorials is great, but understanding how\r\n            developers <br />\r\n            think is invaluable.\r\n          </p>\r\n        </div>\r\n        <div id=\"two\" className=\"column is-half\">\r\n          <div id=\"three\"> Try it free 7 days then $20/mo. thereafter</div>\r\n          <div id=\"four\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <div className=\"field\">\r\n                <div className=\"control\">\r\n                  <input\r\n                    ref={register({\r\n                      required: true,\r\n                      minLength: 2,\r\n                      maxLength: 20,\r\n                    })}\r\n                    name=\"First\"\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    style={{ borderColor: errors.First && \"red\" }}\r\n                  />\r\n                  {errors.First && errors.First.type === \"required\" && (\r\n                    <small> First Name is required</small>\r\n                  )}\r\n                  {errors.First && errors.First.type === \"minLength\" && (\r\n                    <small>First Name is too short </small>\r\n                  )}\r\n                  {errors.First && errors.First.type === \"maxLength\" && (\r\n                    <small>First Name is too long </small>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"field\">\r\n                <div className=\"control\">\r\n                  <input\r\n                    ref={register({\r\n                      required: true,\r\n                      minLength: 2,\r\n                      maxLength: 20,\r\n                    })}\r\n                    name=\"Last\"\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    placeholder=\" Last Name\"\r\n                    style={{ borderColor: errors.Last && \"red\" }}\r\n                  />\r\n                  {errors.Last && errors.Last.type === \"required\" && (\r\n                    <small> Last Name is required</small>\r\n                  )}\r\n                  {errors.Last && errors.Last.type === \"minLength\" && (\r\n                    <small>Last Name is too short </small>\r\n                  )}\r\n                  {errors.Last && errors.Last.type === \"maxLength\" && (\r\n                    <small>Last Name is too long </small>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <div className=\"control\">\r\n                  <input\r\n                    ref={register({\r\n                      required: true,\r\n                      minLength: 6,\r\n                      pattern: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\r\n                    })}\r\n                    name=\"email\"\r\n                    className=\"input\"\r\n                    type=\"email\"\r\n                    placeholder=\"Email Address\"\r\n                    style={{ borderColor: errors.email && \"red\" }}\r\n                  />\r\n                  {errors.email && errors.email.type === \"required\" && (\r\n                    <small> email is required</small>\r\n                  )}\r\n                  {errors.email && errors.email.type === \"minLength\" && (\r\n                    <small>this is not an email</small>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"field\">\r\n                <div className=\"control\">\r\n                  <input\r\n                    ref={register({\r\n                      required: true,\r\n                      minLength: 9,\r\n                    })}\r\n                    name=\"password\"\r\n                    className=\"input\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    style={{ borderColor: errors.password && \"red\" }}\r\n                  />\r\n                  {errors.password && errors.password.type === \"required\" && (\r\n                    <small> password is required</small>\r\n                  )}\r\n                  {errors.password && errors.password.type === \"minLength\" && (\r\n                    <small>password is too short</small>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <button\r\n                type=\"submit\"\r\n                className=\"field\"\r\n                disabled={formState.isSubmitting}\r\n              >\r\n                CLAIM YOUR FREE TRIAL\r\n              </button>\r\n            </form>\r\n\r\n            <p className=\"yup\">\r\n              By clicking the button, you are agreeing to our{\" \"}\r\n              <a href=\"klo\">\r\n                <strong>Terms and Services</strong>\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <p className=\"attribution\">\r\n          Challenge by{\" \"}\r\n          <a href=\"https://www.frontendmentor.io?ref=challenge\">\r\n            Frontend Mentor\r\n          </a>\r\n          . Coded by <a href=\"https://github.com/beloshh\">badanga ishak</a>.\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Just;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Just from './components/Just'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Just />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}